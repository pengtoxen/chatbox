<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Floating Chat Window</title>
  <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }
    
    body {
      background-color: #f5f5f5;
    }
    
    .floating-chat {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 400px;
      height: 600px;
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      z-index: 1000;
    }
    
    .chat-header {
      padding: 15px;
      background-color: #1890ff;
      color: white;
      font-weight: bold;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .chat-title {
      font-size: 16px;
    }
    
    .close-btn {
      background: none;
      border: none;
      color: white;
      font-size: 20px;
      cursor: pointer;
    }
    
    .chat-tabs {
      display: flex;
      border-bottom: 1px solid #eee;
      padding: 0 15px;
    }
    
    .chat-tab {
      padding: 10px 15px;
      cursor: pointer;
      font-size: 14px;
      position: relative;
    }
    
    .chat-tab.active {
      color: #1890ff;
    }
    
    .chat-tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 2px;
      background-color: #1890ff;
    }
    
    .chat-tab.new-chat {
      color: #1890ff;
      font-weight: bold;
    }
    
    .messages-container {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      background-color: #fafafa;
    }
    
    .message {
      margin-bottom: 15px;
      display: flex;
      flex-direction: column;
    }
    
    .message.user {
      align-items: flex-end;
    }
    
    .message.assistant {
      align-items: flex-start;
    }
    
    .message-bubble {
      max-width: 80%;
      padding: 10px 15px;
      border-radius: 18px;
      margin-bottom: 5px;
      word-wrap: break-word;
    }
    
    .message.user .message-bubble {
      background-color: #1890ff;
      color: white;
      border-top-right-radius: 4px;
    }
    
    .message.assistant .message-bubble {
      background-color: #e6e6e6;
      color: #333;
      border-top-left-radius: 4px;
    }
    
    .message-time {
      font-size: 12px;
      color: #999;
    }
    
    .input-area {
      padding: 15px;
      border-top: 1px solid #eee;
      display: flex;
      align-items: center;
      background-color: white;
    }
    
    .message-input {
      flex: 1;
      padding: 10px 15px;
      border: 1px solid #ddd;
      border-radius: 20px;
      outline: none;
      resize: none;
      max-height: 100px;
    }
    
    .send-btn {
      margin-left: 10px;
      padding: 10px 15px;
      background-color: #1890ff;
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
    }
    
    .send-btn:hover {
      background-color: #40a9ff;
    }
    
    .chat-list {
      flex: 1;
      overflow-y: auto;
      padding: 10px 0;
    }
    
    .chat-item {
      padding: 12px 15px;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .chat-item:hover {
      background-color: #f5f5f5;
    }
    
    .chat-item.active {
      background-color: #e6f7ff;
    }
    
    .chat-item-title {
      font-size: 14px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      flex: 1;
    }
    
    .chat-item-time {
      font-size: 12px;
      color: #999;
      margin-left: 10px;
    }
    
    .delete-chat-btn {
      margin-left: 10px;
      color: #ff4d4f;
      background: none;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="chat-root"></div>

  <script type="text/babel">
    const { useState, useEffect, useRef } = React;
    
    // 生成随机ID
    const generateId = () => Math.random().toString(36).substr(2, 9);
    
    // 格式化时间显示
    const formatTime = (timestamp) => {
      const date = new Date(timestamp);
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      return `${hours}:${minutes}`;
    };
    
    const FloatingChatApp = () => {
      // 状态管理
      const [activeTab, setActiveTab] = useState('chat');         // 当前激活的标签页
      const [activeChatId, setActiveChatId] = useState(null);    // 当前激活的聊天ID
      const [chats, setChats] = useState([]);                    // 所有聊天记录
      const [messageInput, setMessageInput] = useState('');      // 输入框内容
      const [isMinimized, setIsMinimized] = useState(false);    // 是否最小化窗口
      
      // 获取当前激活的聊天
      const activeChat = chats.find(chat => chat.id === activeChatId) || null;
      
      // 创建滚动到底部的引用
      const messagesEndRef = useRef(null);
      
      // 滚动到底部的函数
      const scrollToBottom = () => {
        if (messagesEndRef.current) {
          messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
        }
      };
      
      // 当聊天消息变化时自动滚动到底部
      useEffect(() => {
        scrollToBottom();
      }, [activeChat?.messages]);
      
      // 创建新聊天
      const createNewChat = () => {
        const newChat = {
          id: generateId(),
          title: 'New Chat',
          messages: [],
          isNew: true,
          timestamp: Date.now()
        };
        setChats([newChat, ...chats]);
        setActiveChatId(newChat.id);
        setActiveTab('chat');
      };
      
      // 发送消息
      const sendMessage = (text) => {
        if (!text.trim()) return;
        
        // 创建用户消息对象
        const newUserMessage = {
          id: generateId(),
          text: text,
          sender: 'user',
          timestamp: Date.now()
        };
        
        // 更新消息列表
        const currentMessages = activeChat ? activeChat.messages : [];
        const updatedMessages = [...currentMessages, newUserMessage];
        
        // 更新或创建聊天
        const updatedChat = activeChat 
          ? {
              ...activeChat,
              messages: updatedMessages,
              isNew: false,
              timestamp: Date.now()
            }
          : {
              id: generateId(),
              title: 'New Chat',
              messages: updatedMessages,
              isNew: false,
              timestamp: Date.now()
            };
        
        // 更新状态
        if (activeChat) {
          setChats(chats.map(chat => 
            chat.id === activeChat.id ? updatedChat : chat
          ));
        } else {
          setChats([updatedChat, ...chats]);
          setActiveChatId(updatedChat.id);
        }
        
        // 清空输入框
        setMessageInput('');
        
        // 模拟AI回复 (1秒延迟)
        setTimeout(() => {
          const aiResponse = {
            id: generateId(),
            text: `This is a simulated response to "${text}"`,
            sender: 'assistant',
            timestamp: Date.now()
          };
          
          // 更新聊天记录
          const withAiResponse = {
            ...updatedChat,
            messages: [...updatedMessages, aiResponse],
            title: text.length > 20 ? `${text.substring(0, 20)}...` : text
          };
          
          setChats(chats.map(chat => 
            chat.id === updatedChat.id ? withAiResponse : chat
          ));
        }, 1000);
      };
      
      // 删除聊天
      const deleteChat = (chatId, e) => {
        e.stopPropagation();
        const updatedChats = chats.filter(chat => chat.id !== chatId);
        setChats(updatedChats);
        if (activeChatId === chatId) {
          setActiveChatId(null);
        }
      };
      
      return (
        <div className="floating-chat">
          {/* 聊天窗口标题栏 */}
          <div className="chat-header">
            <div className="chat-title">AI Assistant</div>
            <button 
              className="close-btn"
              onClick={() => setIsMinimized(!isMinimized)}
            >
              {isMinimized ? '+' : '-'}
            </button>
          </div>
          
          {/* 主内容区域 (非最小化状态时显示) */}
          {!isMinimized && (
            <>
              {/* 标签页导航 */}
              <div className="chat-tabs">
                <div 
                  className={`chat-tab ${activeTab === 'chat' ? 'active' : ''}`}
                  onClick={() => setActiveTab('chat')}
                >
                  Chat
                </div>
                <div 
                  className={`chat-tab ${activeTab === 'history' ? 'active' : ''}`}
                  onClick={() => setActiveTab('history')}
                >
                  History
                </div>
                <div 
                  className="chat-tab new-chat"
                  onClick={createNewChat}
                >
                  + New Chat
                </div>
              </div>
              
              {/* 聊天内容区域 */}
              {activeTab === 'chat' ? (
                <>
                  {/* 消息显示区域 */}
                  <div className="messages-container">
                    {activeChat?.messages.map(message => (
                      <div 
                        key={message.id} 
                        className={`message ${message.sender}`}
                      >
                        <div className="message-bubble">{message.text}</div>
                        <div className="message-time">
                          {message.sender === 'user' ? 'You' : 'Assistant'} · {formatTime(message.timestamp)}
                        </div>
                      </div>
                    ))}
                    {/* 滚动定位点 */}
                    <div ref={messagesEndRef} />
                  </div>
                  
                  {/* 消息输入区域 */}
                  <div className="input-area">
                    <textarea
                      className="message-input"
                      placeholder="Type a message..."
                      value={messageInput}
                      onChange={(e) => setMessageInput(e.target.value)}
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault();
                          sendMessage(messageInput);
                        }
                      }}
                    />
                    <button 
                      className="send-btn"
                      onClick={() => sendMessage(messageInput)}
                    >
                      Send
                    </button>
                  </div>
                </>
              ) : (
                /* 历史记录区域 */
                <div className="chat-list">
                  {chats.map(chat => (
                    <div
                      key={chat.id}
                      className={`chat-item ${activeChatId === chat.id ? 'active' : ''}`}
                      onClick={() => {
                        setActiveChatId(chat.id);
                        setActiveTab('chat');
                      }}
                    >
                      <div className="chat-item-title">
                        {chat.title}
                      </div>
                      <div className="chat-item-time">
                        {formatTime(chat.timestamp)}
                      </div>
                      <button 
                        className="delete-chat-btn"
                        onClick={(e) => deleteChat(chat.id, e)}
                      >
                        Delete
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </>
          )}
        </div>
      );
    };
    
    // 渲染React应用
    ReactDOM.render(<FloatingChatApp />, document.getElementById('chat-root'));
  </script>
</body>
</html>
