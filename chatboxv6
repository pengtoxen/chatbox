<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Chat Assistant</title>
  <style>
    body {
      font-family: 'PingFang SC', 'Microsoft YaHei', sans-serif;
      margin: 0;
      padding: 0;
    }

    #chat-root {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
    }

    .chat-toggle-button {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background-color: #3498db;
      color: white;
      border: none;
      font-size: 24px;
      cursor: pointer;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      z-index: 1001;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .chat-toggle-button:hover {
      transform: scale(1.05);
      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
    }

    .draggable-header {
      cursor: move;
      user-select: none;
    }

    .chat-window {
      width: 400px;
      height: 500px;
      background-color: white;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
      display: flex;
      overflow: hidden;
      position: fixed;
      right: 20px;
      bottom: 20px;
      z-index: 1000;
      resize: none;
    }

    .chat-window.maximized {
      width: calc(100vw - 40px);
      height: calc(100vh - 40px);
      right: 20px;
      bottom: 20px;
      resize: none;
    }

    .resizable {
      resize: both;
      overflow: auto;
      min-width: 300px;
      min-height: 400px;
    }

    .chat-header {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 48px;
      background-color: #3498db;
      color: white;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 16px;
      z-index: 100;
    }

    .chat-title {
      font-weight: 600;
      font-size: 16px;
    }

    .chat-controls button {
      background: none;
      border: none;
      color: white;
      font-size: 16px;
      cursor: pointer;
      margin-left: 12px;
      padding: 4px;
    }

    .chat-controls button:hover {
      background-color: rgba(255, 255, 255, 0.2);
    }

    .sidebar {
      width: 140px;
      background-color: #2c3e50;
      color: white;
      padding: 16px 12px;
      overflow-y: auto;
      border-right: 1px solid #1a252f;
      margin-top: 48px;
    }

    .sidebar.collapsed {
      width: 48px;
      overflow: hidden;
    }

    .new-chat-btn {
      background-color: #3498db;
      color: white;
      border: none;
      padding: 8px 12px;
      cursor: pointer;
      font-size: 14px;
      width: 100%;
      margin-bottom: 16px;
      transition: background-color 0.2s;
      white-space: nowrap;
      overflow: hidden;
    }

    .sidebar.collapsed .new-chat-btn {
      padding: 8px;
      text-align: center;
    }

    .sidebar.collapsed .new-chat-btn span {
      display: none;
    }

    .sidebar.collapsed .new-chat-btn::before {
      content: "+";
      font-size: 16px;
    }

    .history-item {
      padding: 10px;
      margin-bottom: 8px;
      cursor: pointer;
      transition: background-color 0.2s;
      font-size: 14px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      position: relative;
    }

    .sidebar.collapsed .history-item {
      padding: 10px;
      text-align: center;
    }

    .sidebar.collapsed .history-item .text {
      display: none;
    }

    .sidebar.collapsed .history-item::before {
      content: "ðŸ’¬";
      font-size: 16px;
    }

    .sidebar.collapsed .history-item .time {
      display: none;
    }

    .history-item:hover, .history-item.active {
      background-color: #3498db;
    }

    .history-item .time {
      font-size: 12px;
      color: #bdc3c7;
      margin-top: 4px;
    }

    .history-item-tooltip {
      position: absolute;
      left: 100%;
      top: 50%;
      transform: translateY(-50%);
      background-color: #333;
      color: white;
      padding: 6px 12px;
      font-size: 12px;
      white-space: nowrap;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s;
      margin-left: 10px;
    }

    .sidebar.collapsed .history-item:hover .history-item-tooltip {
      opacity: 1;
    }

    .chat-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      margin-top: 48px;
    }

    .new-chat-prompt {
      padding: 24px;
      text-align: center;
      color: #666;
    }

    .new-chat-prompt h3 {
      margin-top: 0;
      color: #2c3e50;
    }

    .new-chat-prompt p {
      margin-bottom: 16px;
    }

    .messages-container {
      flex: 1;
      padding: 16px;
      overflow-y: auto;
      background-color: #f9f9f9;
    }

    .message {
      margin-bottom: 16px;
      display: flex;
      flex-direction: column;
    }

    .message.user {
      align-items: flex-end;
    }

    .message.bot {
      align-items: flex-start;
    }

    .message-bubble {
      max-width: 80%;
      padding: 12px 16px;
      word-wrap: break-word;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      font-size: 15px;
    }

    .message.user .message-bubble {
      background-color: #3498db;
      color: white;
    }

    .message.bot .message-bubble {
      background-color: #e9ecef;
      color: black;
    }

    .message-time {
      font-size: 12px;
      color: #666;
      margin-top: 4px;
    }

    .input-area {
      display: flex;
      padding: 16px;
      border-top: 1px solid #eee;
      background-color: white;
    }

    .message-input {
      flex: 1;
      padding: 12px 16px;
      border: 1px solid #ddd;
      outline: none;
      margin-right: 12px;
      font-size: 15px;
      transition: border-color 0.2s;
    }

    .message-input:focus {
      border-color: #3498db;
    }

    .send-button {
      padding: 12px 20px;
      background-color: #3498db;
      color: white;
      border: none;
      cursor: pointer;
      font-weight: 600;
      transition: background-color 0.2s;
    }

    .send-button:hover {
      background-color: #2980b9;
    }

    .toggle-sidebar {
      position: absolute;
      left: 0;
      top: 48px;
      width: 24px;
      height: 24px;
      background-color: #2c3e50;
      color: white;
      border: none;
      cursor: pointer;
      z-index: 101;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .sidebar.collapsed + .toggle-sidebar {
      left: 48px;
    }

    .resize-handle {
      position: absolute;
      right: 0;
      bottom: 0;
      width: 12px;
      height: 12px;
      cursor: se-resize;
      z-index: 100;
    }
  </style>
</head>
<body>
  <button id="toggle-chat" class="chat-toggle-button">ðŸ’¬</button>
  <div id="chat-root"></div>

  <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <script type="text/babel">
    const { useState, useRef, useEffect } = React;

    const generateId = () => Date.now().toString(36) + Math.random().toString(36).substr(2);

    const loadChatHistory = () => {
      const history = localStorage.getItem('chatHistory');
      return history ? JSON.parse(history) : [];
    };

    const saveChatHistory = (history) => {
      localStorage.setItem('chatHistory', JSON.stringify(history));
    };

    const loadChatState = () => {
      const state = localStorage.getItem('chatState');
      return state ? JSON.parse(state) : null;
    };

    const saveChatState = (state) => {
      localStorage.setItem('chatState', JSON.stringify(state));
    };

    const formatTime = (timestamp) => {
      const now = Date.now();
      const diff = now - timestamp;
      const date = new Date(timestamp);
      
      if (diff < 60000) return 'Just now';
      if (diff < 3600000) return `${Math.floor(diff / 60000)} minutes ago`;
      if (diff < 86400000) return `${Math.floor(diff / 3600000)} hours ago`;
      if (diff < 604800000) return `${Math.floor(diff / 86400000)} days ago`;
      return date.toLocaleDateString();
    };

    const FloatingChatApp = () => {
      const [isOpen, setIsOpen] = useState(false);
      const [isMaximized, setIsMaximized] = useState(false);
      const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
      const [position, setPosition] = useState({ x: window.innerWidth - 420, y: window.innerHeight - 520 });
      const [size, setSize] = useState({ width: 400, height: 500 });
      const [chatHistory, setChatHistory] = useState(loadChatHistory());
      const [activeChatId, setActiveChatId] = useState(null);
      const [activeChat, setActiveChat] = useState(null);
      const [isDragging, setIsDragging] = useState(false);
      const [isResizing, setIsResizing] = useState(false);
      const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
      const [resizeStart, setResizeStart] = useState({ x: 0, y: 0, width: 0, height: 0 });
      const [isNewChatPrompt, setIsNewChatPrompt] = useState(false);
      const chatWindowRef = useRef(null);
      const messagesEndRef = useRef(null);
      const messageInputRef = useRef(null);

      const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
      };

      const startNewChatPrompt = () => {
        setIsNewChatPrompt(true);
        setActiveChatId(null);
        setActiveChat(null);
        setTimeout(() => {
          if (messageInputRef.current) {
            messageInputRef.current.focus();
          }
        }, 0);
      };

      const createNewChat = (firstMessage) => {
        if (!firstMessage.trim()) return;
        
        const newChatId = generateId();
        const chatTitle = firstMessage.length > 20 
          ? firstMessage.substring(0, 20) + '...' 
          : firstMessage;
        
        const newChat = {
          id: newChatId,
          title: chatTitle,
          messages: [],
          timestamp: Date.now(),
          isNew: false
        };
        
        setActiveChatId(newChatId);
        setActiveChat(newChat);
        setIsNewChatPrompt(false);
        
        setChatHistory(prev => {
          const newHistory = [newChat, ...prev];
          saveChatHistory(newHistory);
          return newHistory;
        });
      };

      const loadChat = (chatId) => {
        const chatFromHistory = chatHistory.find(chat => chat.id === chatId);
        if (chatFromHistory) {
          setActiveChatId(chatId);
          setActiveChat({
            ...chatFromHistory,
            isNew: false
          });
          setIsNewChatPrompt(false);
        }
      };

      const saveCurrentChat = () => {
        if (!activeChat || activeChat.messages.filter(msg => msg.sender === 'user').length === 0) return;
        
        const userMessages = activeChat.messages.filter(msg => msg.sender === 'user');
        const firstUserMessage = userMessages[0].text;
        const chatTitle = firstUserMessage.length > 20 
          ? firstUserMessage.substring(0, 20) + '...' 
          : firstUserMessage;
        
        const updatedChat = {
          ...activeChat,
          title: chatTitle,
          timestamp: Date.now(),
          isNew: false
        };
        
        setChatHistory(prev => {
          const existingIndex = prev.findIndex(chat => chat.id === updatedChat.id);
          const newHistory = existingIndex >= 0 
            ? [...prev.slice(0, existingIndex), updatedChat, ...prev.slice(existingIndex + 1)]
            : [updatedChat, ...prev];
          
          saveChatHistory(newHistory);
          return newHistory;
        });
      };

      const handleDragStart = (e) => {
        if (e.target.className.includes('draggable-header')) {
          setIsDragging(true);
          setDragStart({
            x: e.clientX - position.x,
            y: e.clientY - position.y
          });
          e.preventDefault();
        }
      };

      const handleDrag = (e) => {
        if (isDragging) {
          const newX = e.clientX - dragStart.x;
          const newY = e.clientY - dragStart.y;
          
          const boundedX = Math.max(0, Math.min(window.innerWidth - size.width, newX));
          const boundedY = Math.max(0, Math.min(window.innerHeight - size.height, newY));
          
          setPosition({
            x: boundedX,
            y: boundedY
          });
        }
      };

      const handleDragEnd = () => {
        setIsDragging(false);
      };

      const handleResizeStart = (e) => {
        setIsResizing(true);
        setResizeStart({
          x: e.clientX,
          y: e.clientY,
          width: size.width,
          height: size.height
        });
        e.preventDefault();
      };

      const handleResize = (e) => {
        if (isResizing) {
          const deltaX = e.clientX - resizeStart.x;
          const deltaY = e.clientY - resizeStart.y;
          
          const newWidth = Math.max(300, resizeStart.width + deltaX);
          const newHeight = Math.max(400, resizeStart.height + deltaY);
          
          setSize({
            width: newWidth,
            height: newHeight
          });
        }
      };

      const handleResizeEnd = () => {
        setIsResizing(false);
      };

      const sendMessage = (text) => {
        if (!text.trim()) return;
        
        if (isNewChatPrompt) {
          createNewChat(text);
          return;
        }
        
        const newUserMessage = {
          id: generateId(),
          text: text,
          sender: 'user',
          timestamp: Date.now()
        };
        
        const updatedMessages = [...(activeChat?.messages || []), newUserMessage];
        const updatedChat = {
          ...(activeChat || { id: generateId(), title: 'New Chat', isNew: false }),
          messages: updatedMessages,
          isNew: false
        };
        
        setActiveChat(updatedChat);
        if (!activeChatId) setActiveChatId(updatedChat.id);
        
        if (updatedMessages.filter(m => m.sender === 'user').length === 1) {
          const firstUserMessage = updatedMessages.find(m => m.sender === 'user').text;
          const chatTitle = firstUserMessage.length > 20 
            ? firstUserMessage.substring(0, 20) + '...' 
            : firstUserMessage;
          
          const chatToSave = {
            ...updatedChat,
            title: chatTitle,
            timestamp: Date.now()
          };
          
          setChatHistory(prev => {
            const newHistory = [chatToSave, ...prev];
            saveChatHistory(newHistory);
            return newHistory;
          });
        }
        
        setTimeout(() => {
          const botResponses = [
            'I understand, please continue.',
            'That\'s an interesting point.',
            'Could you elaborate on that?',
            'I\'ll remember this information.',
            'Thanks for sharing!',
            'I\'m still learning, please be patient with my progress.',
            'That\'s an interesting question, let me think...',
            'From what I understand, you\'re asking...',
            'Let me check the relevant information...',
            'This is a common question, the solution is...'
          ];
          const randomResponse = botResponses[Math.floor(Math.random() * botResponses.length)];
          
          const newBotMessage = {
            id: generateId(),
            text: randomResponse,
            sender: 'bot',
            timestamp: Date.now()
          };
          
          setActiveChat(prev => ({
            ...prev,
            messages: [...prev.messages, newBotMessage]
          }));
        }, 800 + Math.random() * 1000);
      };

      const handleSendMessage = () => {
        const input = messageInputRef.current;
        const message = input.value.trim();
        
        if (message) {
          sendMessage(message);
          input.value = '';
        }
      };

      const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
          handleSendMessage();
        }
      };

      useEffect(() => {
        // Load saved state when component mounts
        const savedState = loadChatState();
        if (savedState) {
          setPosition(savedState.position || { x: window.innerWidth - 420, y: window.innerHeight - 520 });
          setSize(savedState.size || { width: 400, height: 500 });
          setIsSidebarCollapsed(savedState.isSidebarCollapsed || false);
        }
      }, []);

      useEffect(() => {
        document.addEventListener('mousemove', handleDrag);
        document.addEventListener('mouseup', handleDragEnd);
        document.addEventListener('mousemove', handleResize);
        document.addEventListener('mouseup', handleResizeEnd);
        
        const toggleButton = document.getElementById('toggle-chat');
        if (toggleButton) {
          toggleButton.addEventListener('click', () => {
            const newIsOpen = !isOpen;
            setIsOpen(newIsOpen);
            if (newIsOpen && !activeChatId && !isNewChatPrompt) {
              startNewChatPrompt();
            }
            
            // Save state when closing
            if (!newIsOpen) {
              saveChatState({
                position,
                size,
                isSidebarCollapsed
              });
            }
          });
        }
        
        return () => {
          document.removeEventListener('mousemove', handleDrag);
          document.removeEventListener('mouseup', handleDragEnd);
          document.removeEventListener('mousemove', handleResize);
          document.removeEventListener('mouseup', handleResizeEnd);
          if (toggleButton) {
            toggleButton.removeEventListener('click', () => setIsOpen(!isOpen));
          }
        };
      }, [isOpen, activeChatId, isDragging, dragStart, isResizing, resizeStart, position, size, isSidebarCollapsed, isNewChatPrompt]);

      useEffect(() => {
        const handleResizeWindow = () => {
          if (!isMaximized) {
            setPosition({
              x: Math.min(position.x, window.innerWidth - size.width),
              y: Math.min(position.y, window.innerHeight - size.height)
            });
          }
        };
        
        window.addEventListener('resize', handleResizeWindow);
        return () => window.removeEventListener('resize', handleResizeWindow);
      }, [isMaximized, position, size]);

      // Auto-scroll to bottom when messages change
      useEffect(() => {
        scrollToBottom();
      }, [activeChat?.messages]);

      if (!isOpen) return null;

      return (
        <div 
          ref={chatWindowRef}
          className={`chat-window ${isMaximized ? 'maximized' : ''} ${!isMaximized ? 'resizable' : ''}`}
          style={{
            left: isMaximized ? '20px' : `${position.x}px`,
            top: isMaximized ? '20px' : `${position.y}px`,
            width: isMaximized ? 'calc(100vw - 40px)' : `${size.width}px`,
            height: isMaximized ? 'calc(100vh - 40px)' : `${size.height}px`,
          }}
        >
          <div 
            className="draggable-header chat-header"
            onMouseDown={handleDragStart}
          >
            <div className="chat-title">AI Chat Assistant</div>
            <div className="chat-controls">
              <button onClick={() => setIsMaximized(!isMaximized)}>
                {isMaximized ? 'ðŸ——' : 'ðŸ—–'}
              </button>
              <button onClick={() => setIsOpen(false)}>Ã—</button>
            </div>
          </div>
          
          <div className={`sidebar ${isSidebarCollapsed ? 'collapsed' : ''}`}>
            <button 
              className="new-chat-btn"
              onClick={startNewChatPrompt}
            >
              <span>+ New Chat</span>
            </button>
            
            {chatHistory.map(chat => (
              <div
                key={chat.id}
                className={`history-item ${activeChatId === chat.id ? 'active' : ''}`}
                onClick={() => {
                  saveCurrentChat();
                  loadChat(chat.id);
                }}
              >
                <span className="text">{chat.title}</span>
                <div className="time">{formatTime(chat.timestamp)}</div>
                {isSidebarCollapsed && (
                  <div className="history-item-tooltip">
                    {chat.title}<br />
                    {formatTime(chat.timestamp)}
                  </div>
                )}
              </div>
            ))}
          </div>
          
          <button 
            className="toggle-sidebar"
            onClick={() => setIsSidebarCollapsed(!isSidebarCollapsed)}
          >
            {isSidebarCollapsed ? '>' : '<'}
          </button>
          
          {!isMaximized && (
            <div 
              className="resize-handle"
              onMouseDown={handleResizeStart}
            ></div>
          )}
          
          <div className="chat-content">
            {isNewChatPrompt ? (
              <div className="new-chat-prompt">
                <h3>Start a New Chat</h3>
                <p>Type your first message to begin a new conversation</p>
                <div className="input-area">
                  <input
                    ref={messageInputRef}
                    type="text"
                    className="message-input"
                    placeholder="Type your first message..."
                    onKeyPress={handleKeyPress}
                  />
                  <button 
                    className="send-button"
                    onClick={handleSendMessage}
                  >
                    Start Chat
                  </button>
                </div>
              </div>
            ) : activeChat ? (
              <>
                <div className="messages-container">
                  {activeChat.messages.map(message => (
                    <div 
                      key={message.id} 
                      className={`message ${message.sender}`}
                    >
                      <div className="message-bubble">{message.text}</div>
                      <div className="message-time">
                        {message.sender === 'user' ? 'You' : 'Assistant'} Â· {formatTime(message.timestamp)}
                      </div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </div>
                
                <div className="input-area">
                  <input
                    ref={messageInputRef}
                    type="text"
                    className="message-input"
                    placeholder="Type a message..."
                    onKeyPress={handleKeyPress}
                  />
                  <button 
                    className="send-button"
                    onClick={handleSendMessage}
                  >
                    Send
                  </button>
                </div>
              </>
            ) : (
              <div className="new-chat-prompt">
                <h3>Welcome to AI Chat Assistant</h3>
                <p>Click "New Chat" to start a conversation</p>
              </div>
            )}
          </div>
        </div>
      );
    };

    ReactDOM.render(<FloatingChatApp />, document.getElementById('chat-root'));
  </script>
</body>
</html>
